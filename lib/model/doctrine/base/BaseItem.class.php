<?php

/**
 * BaseItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $company_id
 * @property decimal $quantity
 * @property decimal $discount
 * @property integer $common_id
 * @property integer $product_id
 * @property integer $expense_type_id
 * @property clob $description
 * @property decimal $unitary_cost
 * @property string $size
 * @property string $color
 * @property Company $Company
 * @property Common $Common
 * @property Doctrine_Collection $Taxes
 * @property Product $Product
 * @property ExpenseType $ExpenseType
 * @property Doctrine_Collection $ItemTax
 * 
 * @method integer             getCompanyId()       Returns the current record's "company_id" value
 * @method decimal             getQuantity()        Returns the current record's "quantity" value
 * @method decimal             getDiscount()        Returns the current record's "discount" value
 * @method integer             getCommonId()        Returns the current record's "common_id" value
 * @method integer             getProductId()       Returns the current record's "product_id" value
 * @method integer             getExpenseTypeId()   Returns the current record's "expense_type_id" value
 * @method clob                getDescription()     Returns the current record's "description" value
 * @method decimal             getUnitaryCost()     Returns the current record's "unitary_cost" value
 * @method string              getSize()            Returns the current record's "size" value
 * @method string              getColor()           Returns the current record's "color" value
 * @method Company             getCompany()         Returns the current record's "Company" value
 * @method Common              getCommon()          Returns the current record's "Common" value
 * @method Doctrine_Collection getTaxes()           Returns the current record's "Taxes" collection
 * @method Product             getProduct()         Returns the current record's "Product" value
 * @method ExpenseType         getExpenseType()     Returns the current record's "ExpenseType" value
 * @method Doctrine_Collection getItemTax()         Returns the current record's "ItemTax" collection
 * @method Item                setCompanyId()       Sets the current record's "company_id" value
 * @method Item                setQuantity()        Sets the current record's "quantity" value
 * @method Item                setDiscount()        Sets the current record's "discount" value
 * @method Item                setCommonId()        Sets the current record's "common_id" value
 * @method Item                setProductId()       Sets the current record's "product_id" value
 * @method Item                setExpenseTypeId()   Sets the current record's "expense_type_id" value
 * @method Item                setDescription()     Sets the current record's "description" value
 * @method Item                setUnitaryCost()     Sets the current record's "unitary_cost" value
 * @method Item                setSize()            Sets the current record's "size" value
 * @method Item                setColor()           Sets the current record's "color" value
 * @method Item                setCompany()         Sets the current record's "Company" value
 * @method Item                setCommon()          Sets the current record's "Common" value
 * @method Item                setTaxes()           Sets the current record's "Taxes" collection
 * @method Item                setProduct()         Sets the current record's "Product" value
 * @method Item                setExpenseType()     Sets the current record's "ExpenseType" value
 * @method Item                setItemTax()         Sets the current record's "ItemTax" collection
 * 
 * @package    siwapp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('item');
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('quantity', 'decimal', 53, array(
             'type' => 'decimal',
             'scale' => 15,
             'notnull' => true,
             'default' => 1,
             'length' => 53,
             ));
        $this->hasColumn('discount', 'decimal', 53, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'default' => 0,
             'length' => 53,
             ));
        $this->hasColumn('common_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('expense_type_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('unitary_cost', 'decimal', 53, array(
             'type' => 'decimal',
             'scale' => 15,
             'notnull' => true,
             'default' => 0,
             'length' => 53,
             ));
        $this->hasColumn('size', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('color', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));


        $this->index('desc', array(
             'fields' => 
             array(
              0 => 'company_id',
              1 => 'description',
             ),
             ));
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Company', array(
             'local' => 'company_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Common', array(
             'local' => 'common_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Tax as Taxes', array(
             'refClass' => 'ItemTax',
             'local' => 'item_id',
             'foreign' => 'tax_id'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('ExpenseType', array(
             'local' => 'expense_type_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ItemTax', array(
             'local' => 'id',
             'foreign' => 'item_id'));
    }
}